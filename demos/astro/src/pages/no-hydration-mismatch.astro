---
import { type ThemeConfig, getThemesAndOptions } from 'palettez'
import { Page } from './_no-hydration-mismatch'
import './_style.css'

export const prerender = false

const config = {
	colorScheme: [
		// {
		// 	value: 'system',
		// 	media: ['(prefers-color-scheme: dark)', 'dark', 'light'],
		// },
		'light',
		'dark',
	],
	contrast: ['standard', 'high'],
} as const satisfies ThemeConfig

const configsByKey = {
	app: config,
	section1: config,
	section2: config,
}

const themeStoreKeys = Object.keys(configsByKey)

const themesAndOptions = getThemesAndOptions(config)

const defaultTheme = {
	colorScheme: 'light',
	contrast: 'standard',
}

const initialThemesByKey = themeStoreKeys.reduce((acc, key) => {
  try {
    acc[key] = Astro.cookies.get(key).json()
  } catch {
    acc[key] = defaultTheme
  }
  return acc
}, {})


if (Astro.request.method === 'POST') {
  const data = await Astro.request.formData()

  const key = data.get('key') as string

  initialThemesByKey[key] = {
    colorScheme: data.get('colorScheme') as string,
    contrast: data.get('contrast') as string,
  }
  
  Astro.cookies.set(key, initialThemesByKey[key], {
    path: '/no-hydration-mismatch',
    httpOnly: true,
    secure: true,
    sameSite: 'strict',
    maxAge: 600,
  })
}

---

<html lang='en'>
  <head>
    <meta charset='UTF-8' />
    <meta
      name='viewport'
      content='width=device-width,initial-scale=1'
    />
    <title>Palettez Astro Demo</title>
  </head>
  <body>
    <Page
      client:load
      configsByKey={configsByKey}
      initialThemesByKey={initialThemesByKey}
      themesAndOptions={themesAndOptions}
    />
  </body>
</html>

---
import { create } from 'palettez'

import './_style.css'

export const prerender = false

const themeManager = create({
  config: {
    colorScheme: {
      label: 'Color scheme',
      options: {
        system: {
          value: 'System',
          isDefault: true,
        },
        light: { value: 'Light' },
        dark: { value: 'Dark' },
      },
    },
    contrast: {
      label: 'Contrast',
      options: {
        standard: { value: 'Standard', isDefault: true },
        high: { value: 'High' },
      },
    },
  },
  getStorage() {
    const options = {
      path: '/',
      httpOnly: true,
      secure: true,
      sameSite: 'strict',
    } as const

    return {
      getItem(key) {
        try {
          return Astro.cookies.get(key)?.json() || null
        } catch {
          return null
        }
      },
      setItem(key, value) {
        Astro.cookies.set(key, value, options)
      },
      removeItem(key) {
        Astro.cookies.delete(key, options)
      },
    }
  },
})

await themeManager.restore()

const themesAndOptions = themeManager.themesAndOptions

if (Astro.request.method === 'POST') {
  try {
    const data = await Astro.request.formData()

    await themeManager.setThemes({
      colorScheme: data.get('colorScheme') as string,
      contrast: data.get('contrast') as string,
    })
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message)
    }
  }
}

const themes = themeManager.getThemes()
---

<html
  lang='en'
  data-color-scheme={themes.colorScheme}
  data-contrast={themes.contrast}
>
  <head>
    <meta charset='UTF-8' />
    <meta
      name='viewport'
      content='width=device-width,initial-scale=1,shrink-to-fit=no'
    />
    <title>Demo</title>
  </head>
  <body>
    <main>
      <h1>Server-side persistence, zero client-side JavaScript</h1>
      <form method='post'>
        {
          themesAndOptions.map((theme) => (
            <div>
              <label for={theme.key}>{theme.label}</label>
              <select id={theme.key} name={theme.key}>
                {theme.options.map((option) => (
                  <option
                  value={option.key}
                  selected={option.key === themes[theme.key]}
                  >
                    {option.value}
                  </option>
                ))}
              </select>
            </div>
          ))
        }
        <button>Save</button>
      </form>
      <br />
      <a href="/">
        Client-side persistence &rarr;
      </a>
    </main>
  </body>
</html>
